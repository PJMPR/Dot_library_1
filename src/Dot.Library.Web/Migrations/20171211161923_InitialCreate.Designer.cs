// <auto-generated />
using Dot.Library.Web;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Dot.Library.Web.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20171211161923_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Dot.Library.Database.Model.Author", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BookID");

                    b.Property<string>("LastName");

                    b.Property<string>("Name");

                    b.HasKey("id");

                    b.HasIndex("BookID");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("Dot.Library.Database.Model.Book", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BookReservationID");

                    b.Property<string>("Description");

                    b.Property<string>("ImgURL");

                    b.Property<string>("Publisher");

                    b.Property<int>("Quantity");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.HasIndex("BookReservationID");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("Dot.Library.Database.Model.BookReservation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("userid");

                    b.HasKey("ID");

                    b.HasIndex("userid");

                    b.ToTable("BookReservation");
                });

            modelBuilder.Entity("Dot.Library.Database.Model.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ParentID");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.HasIndex("ParentID");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Dot.Library.Database.Model.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BookId");

                    b.Property<string>("Name");

                    b.Property<int?>("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Chapter");
                });

            modelBuilder.Entity("Dot.Library.Database.Model.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime>("SentTime");

                    b.Property<int?>("Targetid");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("Targetid");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Dot.Library.Database.Model.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("adress");

                    b.Property<string>("login");

                    b.Property<string>("name");

                    b.Property<string>("pass");

                    b.Property<string>("postalCode");

                    b.Property<string>("surname");

                    b.HasKey("id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Dot.Library.Database.Model.Author", b =>
                {
                    b.HasOne("Dot.Library.Database.Model.Book")
                        .WithMany("Authors")
                        .HasForeignKey("BookID");
                });

            modelBuilder.Entity("Dot.Library.Database.Model.Book", b =>
                {
                    b.HasOne("Dot.Library.Database.Model.BookReservation")
                        .WithMany("reservatedBooks")
                        .HasForeignKey("BookReservationID");
                });

            modelBuilder.Entity("Dot.Library.Database.Model.BookReservation", b =>
                {
                    b.HasOne("Dot.Library.Database.Model.User", "user")
                        .WithMany()
                        .HasForeignKey("userid");
                });

            modelBuilder.Entity("Dot.Library.Database.Model.Category", b =>
                {
                    b.HasOne("Dot.Library.Database.Model.Category", "Parent")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentID");
                });

            modelBuilder.Entity("Dot.Library.Database.Model.Chapter", b =>
                {
                    b.HasOne("Dot.Library.Database.Model.Chapter", "Parent")
                        .WithMany("SubChapters")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Dot.Library.Database.Model.Message", b =>
                {
                    b.HasOne("Dot.Library.Database.Model.User", "Target")
                        .WithMany()
                        .HasForeignKey("Targetid");
                });
#pragma warning restore 612, 618
        }
    }
}
